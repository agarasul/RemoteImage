plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'com.jfrog.bintray'
    id 'maven-publish'
}

def libraryGroupId = 'dev.rasul'
def libraryArtifactId = 'remoteimage'
def libraryVersion = '1.0.3'
afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                from components.release
                groupId = libraryGroupId
                artifactId = libraryArtifactId
                version = libraryVersion
            }
        }
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}
artifacts {
    archives sourcesJar
}

bintray {
    user = project.property('bintray.user')
    key = project.property('bintray.token')
    publications = ['release']
    publish = true
    override = true
    configurations = ['archives']
    pkg {
        repo = 'RemoteImage'
        name = libraryArtifactId
        desc = 'RemoteImage allow to load images from network in Jetpack Compose'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/agarasul/RemoteImage.git'
        publicDownloadNumbers = true
        version {
            name = libraryVersion
            released = new Date()
        }
    }
}


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 3
        versionName "1.0.3"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildFeatures {
        buildConfig false
        compose true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    composeOptions {
        kotlinCompilerVersion "1.4.21"
        kotlinCompilerExtensionVersion "1.0.0-alpha09"
    }
    lintOptions {
        disable 'GradleDependency'
    }

    packagingOptions {
        excludes += "/META-INF/AL2.0"
        excludes += "/META-INF/LGPL2.1"
    }
}


dependencies {

    def compose_version = '1.0.0-alpha09'
    implementation "androidx.compose.runtime:runtime:$compose_version"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.foundation:foundation-layout:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation 'com.squareup.picasso:picasso:2.8'

    androidTestImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation "androidx.compose.ui:ui-test:$compose_version"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        // Treat all Kotlin warnings as errors
        allWarningsAsErrors = true
        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
        // Enable experimental coroutines APIs, including Flow
        freeCompilerArgs += '-Xopt-in=kotlin.Experimental'
        freeCompilerArgs += '-Xallow-jvm-ir-dependencies'

        // Set JVM target to 1.8
        jvmTarget = "1.8"
    }
}
